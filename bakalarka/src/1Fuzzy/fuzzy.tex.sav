% -*-coding: utf-8 -*-

    % Lukasiewiczova algebra s odmocniou
            % Konstrukce matematického modelu
                % Svaz
                % Lukasiewiczova algebra
                % Lukasiewiczova algebra s odmocninou
            % Fuzzy-logická funkce
            % Používané operátory
        % Citlivost
            % Přesnost celočíselné aritmetiky
        % Reprezentace obrazových dat
            % Maska
        % Filtry
            % Typologie filtrů
                % Morfologické
                % Statistické
            % Citlivost filtrů
            % Porovnání s lineárními filtry
%==============================================================


        \note{fuzzy -- dvouhodnotová logika je málo - příliš velká ztráta informace, struktura logiky je vhodná pro analýzu vlastností, umožňuje redukovat
        magické konstanty a zároveň je dostačující pro většinu praktických úloh}


\section{\L ukasiewiczova algebra s odmocninou}
    % bez odmocniny bude množina filtrů omezená (uzavření-otevření nic nedělá) -- vyhnout se přímo trvzení o konečnosti, nekonečnosti
                % jen svaz s neg, V, A má 2^(2^n) operací
                %%%% z residua a negace
        % obohatit systém tak, aby se dala snížit citlivost a dělat průměry -- prostě co ejmenší množina operací, se kterými už uděláme, co potřebujeme
        % odmocnina jde vždy propasovat dolů, jde jí předejít vydělením vstupů mocninou 2ky (2a, 4a udělám pomocí krát)

        % porovnání s lineárními filtry: (Gauss, atd)
            % lineární jsou lepší na gaussovský šum
            % fuzzy umožňuje ubrat předpoklady o vstupu (druh šumu, SMĚS ŠUMŮ -- KOSMICKÉ ZÁŘENÍ VE SPECT...)
    % obecně robustní filtry (dá se udělat fuzzy k-tý prvek)
    % při algoritmickém generování sítí, instantním prohlížení a filtrace
    %=============================================================================================================================

    V této části zkonstruujeme matematický model, který bude snadno aplikovatelný na obrazová data ve formě, jak s nimi pracuje počítač a zároveň nám poskytne vhodný základ pro konstrukci filtrů. Budeme postupovat podobně jako v \cite{MajerovaPhD} a ukážeme, že \L ukasiewiczova algebra s odmocninou je vhodným kandidátem. Na model přitom klademe následující poždavky:
    \begin{itemize}
      \item maximální jednoduchost matematických operací
      \item snadná realizovatelnost v celočíselném oboru
      \item omezená citlivost
      \item neomezená množina filtrů, které je možno zkonstruovat
      \item možnost konstrukce robustních\footnote{tzn. do výstupu filtru se (příliš) nepromítnou okrajové extrémní hodnoty ze vstupu} nízkofrekvenčních filtrů
      \item možnost konstrukce filtrů na bázi aritmetického průměru
      \item možnost konstrukce vysokofrekvenčních filtrů (detektory hran, segmentace)
    \end{itemize}
    Z poždavku jednoduchosti je jasné, že budeme postupovat od základních matematických struktur a ty postupně obohacovat o další operace.

    \subsection{Matematický model}

    Obraz je v počítači reprezentován jako sada diskrétních hodnot omezených v nějakém intervalu (0.0 až 1.0, 0 až 255...). Struktura musí být tedy uzavřená vůči vlastním operacím, musí mít jako nosič omezenou množinu a neměla by jí vadit ani diskretizace této množiny.

    \begin{define}\label{svaz}
    Algebru $S = (M,\wedge,\vee)$ se dvěma binárními operacemi takovými, že platí:
    \begin{align}
    a \wedge b &= b \wedge a, & a \vee b &= b \vee a &&\text{\rl komutativní zákon\rr} \\
    (a \wedge b) \wedge c &= a \wedge (b \wedge c), & (a \vee b) \vee c &= a \vee (b \vee c) &&\text{\rl asociativní zákon\rr} \\
    a \wedge (b \vee a) &= a,& a \vee (b \wedge a) &= a &&\text{\rl zákon absorpce\rr}
    \end{align}
    nazýváme \textbf{svazem}. Operace $\wedge$ \rl\textbf{průsek}\rr a $\vee$ \rl\textbf{spojení}\rr dodefinujeme v souladu s teorií:
    \begin{align}
    a \wedge b &= \min(a,b), \\
    a \vee b &= \max(a,b).
    \end{align}
    \end{define}

    Svaz nám bez dalšího obohacení umožňuje konstruovat základní morfologické filtry jako eroze a dilatace\footnote{tyto a všechny další filtry budou vysvětleny v sekci~\ref{Filtry}, zde slouží pouze pro ilustraci} a je nad ním možno zkonstruovat libovolnou pořadovou statistiku (\kk-tý prvek) -- základ mnoha robustních filtrů ostraňujících šum:

    \begin{define}\label{def k-prvek}
      Buď $n \in \mathbb{N}$, $x_i \in \mathbb{R}, \,\forall i \in \widehat n$. Buď $(x_1,x_2,...,x_n)$ seřazený soubor hodnot tak, že $x_1 \geq x_2 \geq ... \geq x_n$. Pak $x_k$ nazýváme \textbf{k-tou pořadovou statistikou} (k-tým prvkem) tohoto souboru.
    \end{define}

    \begin{theo}\label{theo k-tý prvek}
      Nechť $x_1,x_2,...,x_n \in M$, dále buď $l = n-k+1$, $C^{l}_n$ oindexovaná množina všech l-tic z $\widehat n$, $c^i \in C^{l}_n$ a $c^i_j$ je j-tý prvek i-té l-tice. Pak
      \[
        a_k = \bigwedge_{i = 1}^{{l}\choose{n}}\left( \bigvee_{j = 1}^{l} x_{c_{j}^i} \right)
      \]
      je k-tá pořadová statistika souboru $(x_1,x_2,...,x_n)$.
    \end{theo}
    \begin{proof}
      Vnitřní operace vybere postupně ze všech \textit{l}-tic maximum, vnější operace pak vybere nejmenší z těchto maxim. Nejmenšího maxima se dosáhne právě tehdy, chybí-li v \textit{l}-tici největších $k-1$ prvků a tudíž tímto maximem bude tedy právě \kk-tý prvek.
    \end{proof}

    Bohužel už medián ze sudého počtu prvků je nerealizovatelný (chybí nám aritmetický průměr), stejně jako jakýkoliv vysokofrekvenční filtr\footnote{například detektor hran} (chybí nám rozdíl). Z povahy svazových operací je navíc zřejmé, že získáme pouze hodnotu, která už se objevila na vstupu.

    Abychom získali možnost odčítat, obohatíme svaz o dvě binární operace, z nichž se dá operace rozdílu odvodit (viz \ref{operátory}):

    \begin{define}\label{def residuovaný svaz}
    Buď $(M,\wedge,\vee)$ je svaz s nejmenším prvkem 0 a největším 1, $\otimes$ \rl \textbf{součin}, nebo \textbf{t-norma}\rr je binární, asociativní a komutativní operace a $\rightarrow$ \rl \textbf{residuum}\rr je binární operace. Navíc platí:
    \begin{align}
    &x \otimes 1 = x  &&(\forall x \in M)\\
    &x \otimes y \leq z \Leftrightarrow y \rightarrow z \geq x &&(\forall x,y,z \in M)\label{Galoisova koresp}
    \end{align}
    Pak strukturu $(M,\wedge,\vee,\otimes,\rightarrow,0,1)$ nazýváme \textbf{residuovaný svaz}.
    \end{define}

    Galoisova korespondence \eqref{Galoisova koresp} přiřazuje každému součinu právě jedno residuum \cite{MajerovaPhD}, k plnému popisu operací tedy stačí definovat pouze součin. Za ten zvolíme \L ukasiewiczovu t-normu:

    \begin{define}\label{LA}
    Residuovaný svaz $(\LL,\wedge,\vee,\otimes,\rightarrow,0,1)$ s operacemi $\otimes$ a $\rightarrow$ definovanými v souladu s \eqref{Galoisova koresp} jako
    \begin{align}
    x \otimes y &= \max(x+y-1,0) \\
    x \rightarrow y &= \min(1,1-x+y)
    \end{align}
    a nosičem $\LL = [0,1]$ \rl 0,1 zde opět bereme jako obecný nejmenší a největší prvek, interval později ztotožníme s rozsahem intenzit voxelů v obraze\rr \note{co \ref{def obraz}? je to takhle elegantní?} nazýváme \textbf{\L ukasiewiczova algebra} \textup{(\L A)}.
    \end{define}

    \begin{theo}
      \textup{(\L A)} splňuje podmínky residuovaného svazu.
    \end{theo}
    \begin{proof}
    První rovnost platí triviálně:
      \[
      x \otimes 1 = \max(x+1-1,0) = \max(x,0) = x
      \]
    V druhé ekvivalenci využijeme toho, že pro $\forall x,y \in \LL$ platí $\max(x,y) = -\min(-x,-y)$ a $x,y,z \geq 0$:
    \begin{align*}
      x \otimes y \leq z &\Leftrightarrow \max(x+y-1,0) \leq z \Leftrightarrow \max(x+y-1-z,-z) \leq 0 \Leftrightarrow\\
      &\Leftrightarrow \min(1+z-x-y,z) \geq 0 \Leftrightarrow \min(1+z-y,z+x) \geq x \Leftrightarrow\\
      &\Leftrightarrow 1+z-y \geq x \et z+x \geq x \Leftrightarrow\\
    \intertext{Poslední nerovnost platí vždy. Můžeme ji tedy vynechat, nebo pro naše účely vyměnit za jinou tautologii $1 \geq x$:}
      &\Leftrightarrow 1+z-y \geq x \et 1 \geq x \Leftrightarrow \min(1+z-y,1) \geq x \Leftrightarrow\\
      &\Leftrightarrow y \rightarrow z \geq x
    \end{align*}
    \end{proof}

    \note{0,1 zde představuje jen největší a nejmenší prvek -- je nutné to zmínit?}
    \note{Proč potřebujeme MV-algebru? Gougen, Godel ani Yager nejsou --- říká,že neg neg x je x, což je slušné chování}

    Existují i jiné t-normy (\cite{MajerovaPhD},\cite{Bělíček}), ty ovšem nemají vlastnosti mnohahodnotové logiky \cite{MajerovaPhD}, nebo jsou příliš výpočetně náročné. Poslední obohacení, které provedeme, nám konečně umožní průměrovat:

    \begin{define}\label{LAsqrt}
    \L ukasiewiczovu algebru $(\LL,\wedge,\vee,\otimes,\rightarrow,\sqr,0,1)$ obohacenou o unární operaci \textbf{odmocnina} pro kterou platí:
    \beq
    \sqr(x)\otimes\sqr(x) = x
    \eeq
    nazýváme \textbf{\L ukasiewiczova algebra s odmocninou} \textup{(\LAsq)}.
    \end{define}

    Snadno se přesvědčíme, že
    \beq
    \sqr(x) = \frac{1+x}{2}
    \eeq
    Aritmetický průměr \emph{dvou} hodnot pak můžeme realizovat jako
    \beq
    \sqr(x)\otimes \sqr(y) = \max\left(\frac{1+x}{2}+\frac{1+y}{2}-1,0\right) = \max\left(\frac{x+y}{2},0\right) = \frac{x+y}{2}
    \eeq
    což je vlastně geometrický průměr uvnitř \LAsq. Analogicky by bylo možné definovat libovolnou celočíselnou odmocninu, která by nám umožnila průměrovat libovolný počet hodnot. Filtry založené na průměru mnoha hodnot již však nejsou robustní, a tak se schválně omezíme pouze na druhou odmocninu. I s těmito omezeními je však možné zkonstruovat celou třídu tzv. \emph{dyadických filtrů}, které používají ve váženém průměru zlomky typu $\frac{m}{2^n}$.

    \subsection{Fuzzy-logické funkce}

    Vzhledem k tomu, že při výpočtech výsledků filtrů bude hrát hlavní roli čas, těžko si představit, že například \kk-tou pořadovou charakteristiku budeme implementovat tak, jak je popsána v definici~\ref{theo k-tý prvek}. Přijměme tedy úmluvu, že matematický model nám řekne, jaké operace (funkce,filtry) jsou přípustné, ale při implementaci budeme chtít, aby \emph{pouze výsledek} (nikoliv samotný algoritmus) byl v souladu s teorií, čímž získáme prostor pro optimalizaci kódu na rychlost. Pro další postup bude tedy vhodné rozlišit, které funkce do našeho modelu patří, a které nikoliv.

    \begin{define}\label{def FLF}
    Buď $x \in \LL$ proměnná, $a \in \LL$ konstanta. Pak množinu fuzzy-logických funkcí \textup{(FLF)}, jakožto množinu zobrazení $\LL^k \rightarrow \LL, k \in \mathbb{N}_0$, definujeme indukčním pravidlem:
    \[
    \mathrm{FLF} = x \mid a \mid \f \wedge \g \mid \f \vee \g \mid \f \otimes \g \mid \f \rightarrow \g \mid \sqr(\f)
    \]
    kde $\f,\g$ jsou již \textup{FLF}.
    \end{define}

    \subsection{Používané operátory}\label{operátory}

    Následuje tabulka běžných fuzzy-logických operátorů včetně definic a výsledných hodnot v \LAsq. Všechny operátory vzniknou pouze složením základních operátorů a jsou tedy FLF.

    \begin{table}[h]
    \begin{center}
    \begin{tabular}{llll}
      \toprule
      Operace & Název & Odvození & Význam v \LAsq \\
      \midrule
      $x \vee y$            & spojení                   & definováno & $\max(x,y)$ \\
      $x \wedge y$          & průsek                    & definováno & $\min(x,y)$ \\
      $x \otimes y$         & součin (t-norma)          & definováno & $\max(x+y-1,0)$ \\
      $x \rightarrow y$     & residuum                  & definováno & $\min(1-x+y,1)$ \\
      $ \neg x$             & negace                    & $x \rightarrow 0$ & $1-x$ \\
      $x \leftrightarrow y$ & ekvivalence (biresiduum)  & $(x \rightarrow y) \wedge (y \rightarrow x)$ & $1-|x-y|$ \\
      $x \circ y$           & vzdálenost                & $\neg (x \leftrightarrow y)$ & $|x-y|$ \\
      $x \oplus y$          & součet                    & $\neg (\neg x \otimes \neg y)$ & $\min(x+y,1)$ \\
      $x \ominus y$         & rozdíl                    & $x \otimes \neg y$ & $\max(x-y,0)$ \\
      $x \odot n$           & celočíselný násobek       & $\underbrace{x \oplus x \oplus ... \oplus x}_n, n \in \mathbb{N}$ & $\min(nx,1)$ \\
      $x^n$                 & celočíselná mocnina       & $\underbrace{x \otimes x \otimes ... \otimes x}_n, n \in \mathbb{N} $ & $\max(nx-n+1,0)$ \\
      \bottomrule
    \end{tabular}
    \caption{Odvozené operátory v \LAsq}
    \end{center}
    \end{table}

\section{Citlivost}

\begin{define}\label{def citlivost}
  Buď $\varphi : \LL^n \rightarrow \LL$ \textup{FLF} a $\xx,\yy \in \LL^n$. Pak
  \beq
  \lambda_\varphi = \max_{\xx \neq \yy}\frac{\varphi(\xx) \circ \varphi(\yy)}{\sum_{i=1}^n |x_i - y_i|}\label{citlivost}
  \eeq
  nazveme \textbf{citlivostí} funkce $\varphi$.
\end{define}

Pro další úvahy je dobré znát horní meze citliosti běžných fuzzy-logických operátorů. Ty přehledně shrnuje tabulka \ref{tabulka max citlivosti} (kde $\xx \in \LL^n ,n \in \mathbb{N} ,\;\f ,\g : \LL^n \rightarrow \LL $ jsou FLF) a jsou dokázány v \cite{MajerovaPhD}.

\begin{table}[h]
    \begin{center}
    \begin{tabular}{llp{1cm}ll}
      \toprule
      Operace & $\lambda_{\max}$ && Operace & $\lambda_{\max}$\\
      \midrule
      $\f(\xx)$                         & $\lambda_\f$  && $\f(\xx) \vee \g(\xx)$            & $\max(\lambda_\f,\lambda_\g)$  \\
      $\g(\xx)$                         & $\lambda_\g$  && $\f(\xx) \wedge \g(\xx)$          & $\max(\lambda_\f,\lambda_\g)$  \\
      $\f(\xx) \otimes \g(\xx)$         & $\lambda_\f+\lambda_\g$ && $ \neg \f(\xx)$         & $\lambda_\f$    \\
      $\f(\xx) \rightarrow \g(\xx)$     & $\lambda_\f+\lambda_\g$ && $\sqr(\f(\xx))$         & $\lambda_\f/2$ \\
      $\f(\xx) \leftrightarrow \g(\xx)$ & $\lambda_\f+\lambda_\g$ && $\f(\xx) \oplus \g(\xx)$& $\lambda_\f+\lambda_\g$    \\
      $\f(\xx) \circ \g(\xx)$           & $\lambda_\f+\lambda_\g$ &&$\f(\xx) \ominus \g(\xx)$& $\lambda_\f+\lambda_\g$    \\
      $\f(\xx) \odot n$                 & $n\lambda_\f$ &&  $(\f(\xx))^n$                    & $n\lambda_\f$ \\
      \bottomrule
    \end{tabular}
    \caption{Horní meze citlivosti operátorů v \LAsq}
    \end{center}
\end{table}\label{tabulka max citlivosti}

Citlivost $\lambda_\varphi = 0$ znamená, že funkce $\varphi(\xx) = konst, \, \forall \xx \in \LL^n$ (v čitateli \eqref{citlivost} musí být 0 $\forall \xx$), což odpovídá ztátě veškeré informace nesené vektorem $\xx$. Nízkofrekvenční filtry mají citlivost obecně v intervalu $(0,1]$, vysokofrekvenční pak v intervalu $(1,\infty)$. Zjednodušeně řečeno nízká citlivost způsobuje vymizení detailů, zatímco vysoká může mít za následek vznik nových artefaktů v obraze, vše ale záleží na konkrétním filtru. Z tabulky je dále zřejmé, proč jsme zaváděli odmocninu -- ta jako jediná dokáže citlivost snížit, nebo ji spíše při skládání operací udržet v požadovaném intervalu. \note{dokazovat horní mez citlivosti pro  k-tý prvek, nebo to nechat až na filtry}


\section{Reprezentace obrazových dat}

Při psaní demonstračního kódu jsme se zaměřili na zpracování 3D medicínských dat v odstínech šedi. Jejich zpracování je výpočetně náročnější než u 2D, kvůli vyššímu počtu okolních (viz definice~\ref{def okolí}) voxelů\footnote{základní element 3D obrazu, analogie s pixelem ve 2D -- odtud také jeho název \bq \underline{vo}lume-pi\underline{xel}\eq} a absolutní urychlení výpočtu je tak mnohem citelnější. Data budeme chtít zpracovat pomocí FLF, tzn. musíme nejprve přiřadit vstupům funkce hodnoty konkrétních voxelů.

\begin{define}\label{def obraz}
  \textbf{Obraz} o šířce $w$, výšce $h$ a hloubce $d$ ztotožníme s maticí $\PP \in \LL^{w\times h\times d}$, kde $\LL$ je interval zahrnující všechny přípustné intenzity v obraze. Dále voxel $\PP_{i,j,k}, \,i \in \widehat w, \,j \in \widehat h, \,k \in \widehat d$ označíme jako $x_{i,j,k}$.
\end{define}

    \subsection{Lokální zpracování obrazu}\label{lokální zprac}
    % předem definované pixely vs watershed
    Všechny dále popsané filtry zpracovávají obraz lokálně, to znamená, že do intenzity cílového voxelu se promítnou pouze intezity několika přesně definovaných voxelů z okolí zdrojového voxelu. Jako opačný příklad může sloužit složitější segmentační filtr \emph{rozvodí} (watershed, \cite{Charypar}), u kterého nemůžeme předem říci, které voxely budou mít vliv na výsledek, a dokonce ani kolik jich bude.

    \begin{define}\label{def okolí}
      Buď $R\in \mathbb{N}_0, \,x_{i,j,k} \in \PP$. Pak množinu voxelů
      \beq
      \NN = \Big\{ x_{p,q,r} \in \PP \;\Big\vert\; |p-i| \leq R \wedge |q-j| \leq R \wedge |r-k| \leq R \, \, p,q,r \in \mathbb{Z} \Big\}
      \eeq
      nazýváme \textbf{okolím voxelu $x_{i,j,k}$} o poloměru $R$ a $x_{i,j,k}$ nazýváme \textbf{centrální voxel}. Okolí představuje krychli voxelů $(2R+1) \times (2R+1)\times (2R+1)$, kterou můžeme po plátcích a následně po řádcích přeznačit a uspořádat do \textbf{vektoru okolí} $\Nb = (x_1,x_2,...,x_{(2R+1)^3})$.
    \end{define}

    Z předchozí definice je patrné, že bude problém s okraji obrazu, protože pouze centrální voxel musí ležet uvnitř obrazu. Aby nedocházelo k degeneraci okolí, dodefinujeme intenzity voxelů vně obrazu nějakým zvoleným způsobem \cite{MajerovaPhD}: buď konstatní nulou, hodnotou nejbližího krajního voxelu, periodickým opakováním obrazu, nebo jeho ozrcadlením přes okraj (na hranách se zrcadlí dvakrát, v rozích třikrát). Nejvhodnější způsob závisí na mnoha okolnostech -- od volby filtrů až po charakter samotných dat.

    \subsection{Maska}

    Abychom získali větší variabilitu, ohodnotíme každý voxel z okolí vahou:

    \begin{define}\label{def maska}
      \textbf{Maskou} s poloměrem $R$ nazveme krychlové pole $\MM \in \mathbb{N}_0^{(2R+1) \times (2R+1)\times (2R+1)}$ s prvky $m_{i,j,k}$. Číslo
      \beq
      c = \sum_{i,j,k=1}^{2R+1} m_{i,j,k}
      \eeq
      nazýváme \textbf{kapacita} masky. Masku můžeme taktéž po plátcích a následně po řádcích přeznačit a vytvořit \textbf{vektor vah} $\mathrm{W} = (w_1,w_2,...,w_{(2R+1)^3})$.
    \end{define}

    Binární masku v matematické morfologii (viz sekce \ref{Typologie}) označujeme také jako \emph{strukturní element}. Ve většině aplikací se setkáme pouze s relativně malým $R$ (řekněme $R \leq 3$, \cite{MajerovaPhD}), protože s rostoucím poloměrem masky jednak velmi rychle roste náročnost zpracování ($O(R^3)$ ve 3D krát náročnost filtru) a druhak u nízkofrekvnčních filtrů je efektivnější zmenšit celý obraz a použít menší masku (zvláště, pokud je granularita šumu větší než jeden voxel). U vysokofrekvenčních filtrů nemá větší maska smysl vůbec, neboť tím dochází k nežádoucímu rozmazání.

    \subsection{Seznam}

    Nyní můžeme získat \emph{vážený seznam vstupních hodnot} pro zpracování filtrem jednoduchým přiložením středu masky ($m_{R+1,R+1,R+1}$) na centrální voxel okolí $\NN$:

    \begin{define}\label{def vážený seznam}
    Buď $\MM$ maska s kapacitou $c$ a poloměrem $R$, $\mathrm{W}$ její vektor vah, $\Nb$ vektor okolí, $x_m \in \Nb$ a $w_m \in \mathrm{W}$. Pak c-prvkový seznam
    \beq
    \Lw = (\underbrace{x_1,...,x_1}_{w_1},\underbrace{x_2,...,x_2}_{w_2},...,\underbrace{x_{(2R+1)^3},...,x_{(2R+1)^3}}_{w_{(2R+1)^3}})
    \eeq
    nazvame \textbf{váženým seznamem} hodnot z okolí $\NN$.
    \end{define}

    Pro některé filtry se používá ještě takzvaný \emph{Walshův seznam}:

    \begin{define}\label{def Walshův seznam}
    Seznam o $c+1 \choose 2$ prvcích
    \beq
    \WL = \Big( \frac{x_m + x_n}{2} \;\Big\vert\; x_m,x_n \in \Lw, \,m,n \in \widehat{c} \Big)
    \eeq
    nazveme \textbf{Walshův seznam}.
    \end{define}

    $\WL$ obsahuje průměry všech dvojic z $\Lw$, včetně průměrů prvků se stejným indexem, tedy $\Lw \subset \WL$. Všechny prvky $\WL$ jsou FLF, neboť průměr dvou hodnot je FLF.


% MASKA:
% co to je, váhy (opakovaný výběr), tvoří se z ní seznam jako základní prvek k zpracování
% okraje
% váhy mohou jít proti robustnosti, hrání s váhami

\section{Filtry}\label{Filtry}
    % něco se dělá nad jedním nebo někalika seznamy a je realizovatelné pomocí FLF, je filtr
    % omezujeme použití konstant -- ztrácí se robustnost, de facto je to přepoklad o vstupu

    Nyní už máme dostatečné prostředky k tomu, abychom popsali postup filtrace obrazu:
    \begin{define}\label{def filtr}
      \textbf{Filtrací} zdrojového obrazu $\PP$ na výsledný obraz $\QQ$ stejné velikosti pomocí filtru $\varphi \in \mathrm{FLF}$ a $n$ masek $\MM^{(1)},\MM^{(2)},...,\MM^{(n)}$ rozumíme následující postup:
      \begin{enumerate}
      \item z okolí zdrojového voxelu $x_{i,j,k}^{(\PP)}$ vytvoříme pomocí masek $\MM^{(r)}$ vážené seznamy hodnot $\Lw^{(r)} \,\, \forall r \in \widehat n$
      \item pokud to filtr vyžaduje, vytvoříme z $\Lw^{(r)}$ Walshův seznam pro požadovaná $r$
      \item příslušné seznamy použijeme jako vstup pro $\varphi$
      \item výsledek zapíšeme do odpovídajícího cílového voxelu $x_{i,j,k}^{(\QQ)}$
      \end{enumerate}
      \textbf{Filtrem} tedy rozumíme libovolnou funkci $\varphi \in \mathrm{FLF}, \,\varphi : \LL^s \rightarrow \LL$, kde $s$ je součet počtu prvků všech seznamů použitých na vstupu $\varphi$.
    \end{define}

    V našem případě bude vždy $n = 1$, ale mohou se vyskytnout i fitry využívající např. více asymetrických masek.

    \subsection{Typologie filtrů}\label{Typologie}       % (implementační hledisko)

    Hledisek, podle kterých by se daly filtry roztřídit je více. Jedno, souvidející se tím, jaké frekvence se výsledném obraze zachovají, jsme již zmínili. Vzhledem k tomu, že se dále v práci chceme věnovat hlavně implementaci filtrů, zmíníme ještě jedno rozdělení, které určuje, jak filtr zachází se vstupními daty -- totiž rozdělení na \emph{morfologické} a \emph{statisticky motivované} filtry.

        \subsubsection{Morfologické}
        Jak název napovídá, do této kategorie patří filtry snažící se nějak postihnout či zvýraznit charakter tvarů v obraze. Základ tvoří dva \emph{morfologické operátory} \emph{eroze} a \emph{dilatace}:

        \begin{define}\label{de eroze dilatace}
          Buď $\xx$ seznam délky $c$ vytvořený maskou $\MM$. Pak filtr
          \beq
          \EE(\xx) = \bigwedge_{i=1}^c x_i
          \eeq
          nazveme \textbf{erozí} s maskou $\MM$ a filtr
          \beq
          \DD(\xx) = \bigvee_{i=1}^c x_i
          \eeq
          nazveme \textbf{dilatací} s maskou $\MM$.
        \end{define}

        Filtry jsou komplementární, proto popíšeme pouze erozi: původ jejího názvu je nejvíce patrný při aplikaci na binární (černo-bílý) obraz, kde způsobuje zmenšení bílých oblastí, odstranění bílých detailů (světlé části šumu typu \emph{sůl a pepř}) a rozšíření tmavých \bq trhlin\eq. Na obraze v odstínech šedi dochází obecně ke ztmavnutí, které se nejvíce projeví na ostrých hranách, jinak je efekt srovnatelný s černo-bílým protějškem. Oba filtry jsou triviálně FLF, jakékoliv jejich složení tedy také.

        Z povahy operací je zřejmé, že váhy větší než jedna se budou chovat jako váhy rovny jedné. Proto stačí uvažovat binární masku (\emph{strukturní element}). To je obecná vlastnost i dalších morfologických filtrů, které nejsou postavené přímo na erozi a dilataci, protože jejich výsledky mají vždy charakter maxima nebo minima ze seznamu hodnot.

        Další oblíbené morfologické operátory vzniknou právě kombinací těchto dvou:

        \begin{define}\label{de eroze dilatace}
          Buď $\PP$ obraz. Pak filtr
          \beq
          \OO(\PP) = \DD(\EE(\PP))
          \eeq
          nazveme \textbf{otevřením} a filtr
          \beq
          \CC(\PP) = \EE(\DD(\PP))
          \eeq
          nazveme \textbf{uzavřením}. Zápisem $\EE(\PP)$ rozumíme provedení $\EE(\xx)$ na všechny pixely obrazu $\PP$. U každého filtru jsou eroze i dilatace prováděny se stejnou maskou $\MM$.
        \end{define}

        Filtry odstraní světlé (respektive tmavé) detaily, aniž by zbytek obrázku příliš poškodily, navíc platí:

        \beq
        \OO(\OO(\PP)) = \OO(\PP), \quad \CC(\CC(\PP)) = \CC(\PP)
        \eeq

        Jejich kombinací můžeme získat dva jednoduché vyhlazovací filtry $\OO(\CC(\PP))$ a $\CC(\OO(\PP))$.

        Rozdílem $\DD(\xx) \ominus \EE(\xx)$ získáme jednoduchý detektor hran (je FLF, neboť $\ominus,\DD,\EE$ jsou FLF), nazývaný také \emph{Minkowského kolása} (pro podobnost klobásy a výsledku filtrace binárního obrazu pomocí kruhové masky s velkým poloměrem). Další fuzzy hranové detektory můžeme nalézt např. v \cite{Bělíček}. U detektorů hran je dobře vidět velká citlivost morfologických filtrů na konkréntní podobu strukturního elementu; jeho změnou můžem například (při zachování jeho kapacity) zařídit, že budou detekovány hrany jdoucí pouze v jednom směru, což zcela mění charakter filtru.

            % zmínit binární masku jako SE
        \subsubsection{Statisticky motivované filtry}\label{statisticky motivované}

        Statistické filtry pracují nad \emph{seřazeným} seznamem $\Lw$, nebo $\WL$ a využívají různé kombinace k-té pořadové statistiky. Používají se především k odstaňování šumu. Vyšší váha pixelu v masce znamená, že se výběrem k-tého prvku do jeho hodnoty trefíme pravděpodobněji, avšak přílišné zvýhodnění pixelu ubere filtru robustnost, neboť pak hůře odfiltruje okrajové hodnoty. Asi nejznámějším filtrem této kategorie je \emph{medián}.

        \begin{define}\label{def median}
          Buď $\xx$ seřazený seznam délky $c$ vytvořený maskou $\MM$ s nejmenším prvkem $x_1$ a největším prvkem $x_c$. Pak filtr
          \beq
          \MED(\xx) = \frac{1}{2}\Big(x_{\lfloor \frac{c+1}{2} \rfloor}+x_{\lceil \frac{c+1}{2} \rceil}\Big)
          \eeq
          nazýváme \textbf{medián}.
        \end{define}

        Medián, jako klasický robustní filtr, výborně odstraňuje šum typu \bq sůl a pepř\eq. Typickým šumem, kde se výhodně používají robustní filtry (alespoň v první fázi filtrace), je kontaminovaný gaussovský šum. Kontaminace znamená, že část dat je zničena (nahrazena šumem \bq sůl a pepř\eq, nebo jinými hodnotami na hranici rozsahu), což se může být způsobeno například kosmickým zářením prolétnuvším detektorem. Při zničení $n$ \% obrazu mluvíme o $n$\% kontaminaci. Klasické průměrování by zde sice odstranilo (zmenšením variance, vyhlazením) gaussovský šum, ale zahrnutím zničených dat do průměru by výsledek degradoval. Filtr tedy musí nejprve vybrat pouze relevatní data (odolnost proti kontaminaci\footnote{můžeme brát jako míru robustnosti}), a až poté může být průměrováním odstraněn gaussovský šum. Medián je odolný limitně proti 50\% kontaminaci, ale při lichém počtu prvků vybírá jen jeden prvek, a tudíž vůbec nesnižuje varianci šumu. Toto chování můžeme na úkor zmenšení odolnosti vůči kontaminaci zlepšit pomocí průměrování více vstupů:

        \begin{define}\label{def kvazimedian}
          Buď $\xx$ seřazený seznam délky $c$ vytvořený maskou $\MM$ s nejmenším prvkem $x_1$ a největším prvkem $x_c$, $q\in \mathbb{N}$, $1 \leq q \le \lfloor \frac{c+1}{2} \rfloor-1$. Pak filtr
          \beq
          \MED_{q}(\xx) = \frac{1}{2}\Big(x_{(\lfloor \frac{c+1}{2} \rfloor-q)}+x_{(\lceil \frac{c+1}{2} \rceil-q)}\Big)
          \eeq
          nazýváme \textbf{kvazi-medián} s parametrem q.
        \end{define}

         \begin{define}\label{def BES}
          Buď $\xx$ seřazený seznam délky $c$ vytvořený maskou $\MM$ s nejmenším prvkem $x_1$ a největším prvkem $x_c$. Pak filtr
          \beq
          \BES(\xx) = \frac{1}{4}\Big(x_{\lceil \frac{c}{4} \rceil}+x_{\lfloor \frac{c+1}{2} \rfloor}+x_{\lceil \frac{c+1}{2} \rceil}+x_{\lfloor \frac{3c+4}{4} \rfloor}\Big)
          \eeq
          nazýváme \textbf{Best Easy Systematic} estimator.
        \end{define}

        Filtry jsou FLF, neboť \kk-tý prvek je FLF a aritmetický průměr také. Kvazi-medián průměruje vždy dva prvky, tzn. variance gaussovského šumu se snižuje na polovinu a odolnost vůči kontaminaci klesá s $q$ až k nule -- to je důvod, proč se většinou $q$ volí relativně malé. BES naproti tomu má pevnou limitní odolnost proti kontaminaci 25 \% (vše se vejde pod první, nebo nad třetí kvartil) a varianci snižuje 3krát až 4krát, opět podle toho, zda je počet prvků lichý, nebo sudý.

        Dalšího snížení variance při zachování odolnosti vůči kontaminaci dosáhneme použitím Walshova seznamu. Díky tomu se může počet průměrovaných vstupů až zdvojnásobit a variance tak klesne na polovinu oproti filtrům bez Walshova seznamu. Toto je další důvod, proč i v této kategorii filtrů není vhodné používat jinou, než binární masku -- při vyšší váze hrozí nebezpečí, že ten samý prvek bude vybrán několikrát a průměrováním jeho samého se sebou se variance šumu nesníží. Mediánu nad Walshovým seznamem říkáme Hodges-Lehmannův medián, BES nad Walshovým seznamem značíme WBES. Diskuse snižování variance a odolnosti proti kontaminaci je provedena v sekci \ref{diskuse masky}.

    \subsection{Sítě a kompromisní filtrování}\label{sítě}

        Další možnost, jak zlepšit vlastnosti fitrů (zejména v oblasti odstanění šumu), je kompromisní filtrování a konstrukce sítí filtrů \cite{Compromise denoise},\cite{Minmax denoise}. Přístup spočívá v tom, že na obraz použijeme celou škálu oblíbených (třeba i průměrovacíc filtrů) filtrů a jejich výsedky zpracujeme pomocí další FLF $\phi$ na konečný výsledek (případně na několik mezivýsledků a ty pak stejným způsobem zpracujeme na konečný výsledek). Hledání $\phi$ se děje podobným způsobem, jako učení neuronové sítě, případně experimentováním. To je v obou případěch velmi výpočetně náročné, což je také jeden z důvodů vývoje paralelních algoritmů pro tyto filtry.


% Kvalita obrázku:

% TODO: viziualizovat rozdíly mezi filtry, jako "standardy" brát výsledky předchozích prací 