% -*-coding: utf-8 -*-

        % Celočíselná aritmetika
            % Přesnost
        % Práce s 3D obrazovými daty
            % Načítání, ukládání (lehce k .hdr, .img)
            % Uchování dat v paměti (řešení okrajů...)
        % Masky, strukturní elementy
        % Implementace filtrů
            % Quickselect
%=========================================================================

V této kapitole popíšeme implementaci filtrů a dalších podpůrných struktur na CPU v \Cpp. Je jasné, že pokud chceme se strukturami pracovat stejně (a rychle) na CPU i na GPU, musíme je k tomu od začátku přizpůsobit. Dopředu je také nutné zvážit, jaká data budou budou mezi RAM a GPURAM putovat a vhodně je v paměti uspořádat\footnote{tyto aspekty podrobně rozebereme v kapitole~\ref{gpu úvod}}. Před samotným popisem kódu ještě prodiskutujeme téma přesnosti výpočtů.

    \section{Celočíselná aritmetika}

    Při implementaci jsme se omezili pouze na dva celočíselné typy {\tt unsigned char} (0-255) a {\tt unsigned short} (0-65535). Jednak proto, že vstupní data jsou často právě v rozsahu 0-255 a zadruhé, lidské oko stejně není schopné objektivně rozeznat spojitější škálu -- zvláště u jednokanálových (odstíny šedi) obrazů. Neceločíselné typy jsme úplně vynechali ze stejného důvodu, počítání s nimi je navíc podstatně pomalejší. Výběr konkrétního datového typu lze v kódu jednoduše provést pomocí parametru šablony.

        \subsection{Přesnost}

        Při výpočtech na počítači (principiálně v konečné doméně) vznikají problémy s přesnotí výpočtu. Ty jsou v zásadě dvou typů: ořezání výsledku vlivem rozsahu datového typu a zaokrouhlovací chyby. Díky požadavkům na teorii (uzavřenost vůči operacím) nebude docházet k chybám prvního typu, celočíselný obor zase zjednodušuje analýzu zaokrouhlovacích chyb, protože se nemusíme zabývat chybami vzniklými renormalizací neceločíselných typů, což je proces nad kterým máme pouze malou kontrolu. Z operací způsobujích chyby nám zbyde pouze celočíselné dělení (násobení, sčítání a odčítání jsou přesné, jiné operace nepoužíváme).

        Hrubý odhad chyby dělení nám dává následující nerovnost:
        \beq
        \frac{m}{n} \le \Big\lfloor \frac{m}{n} \Big\rfloor +1 \qquad m \in \Nn_0, \, n \in \Nn
        \eeq
        Abychom chybu zbytečně nezveličovali, budeme dále uvažovat $\delta \in \RR^+$ a přesnější odhad:
        \beq
        \frac{m}{n} = \Big\lfloor \frac{m}{n} \Big\rfloor + \Big\{ \frac{m}{n} \Big\} = \Big\lfloor \frac{m}{n} \Big\rfloor + \delta
        \eeq
        Jednoduchou úvahou dospějeme k závěru, že největší možná desetinná část při dělení $n$ je $\frac{n-1}{n}$, a tedy:
        \beq
        \delta \leq \frac{n-1}{n}
        \eeq

        Chyba dělění je navíc vždy kladná, a násobení a sčítání jí kladnou nechá. Pokud nepoužijeme ve výpočtech rozdíl, který znaménko chyby samozřejmě nezachová, můžeme toho v odhadech využít. Aritmetiku chyby (obecně se znaménkem) shrnuje tabulka~\ref{tabulka max chyby}. Všechny operace v \LAsq můžeme redukovat na operace uvedené v tabulce (viz výše).

        \begin{table}[h]\label{tabulka max chyby}
    \begin{center}
    \begin{tabular}{lll}
      \toprule
      Operace & Popis & Chyba\\
      \midrule
      $\frac{m\pm\delta_1}{n} \; n \neq 0 $ & Celočíselné dělení konstantou & $\pm \Big( \frac{\delta_1}{n} + \frac{n-1}{n}\Big)$ \\
      $(m\pm\delta_1)+(n\pm\delta_2) $      & Sčítání                       & $\pm \,(\delta_1+\delta_2)$ \\
      $(m\pm\delta_1)-(n\pm\delta_2) $      & Odčítání                      & $\pm \,(\delta_1+\delta_2)$ \\
      $n(m\pm\delta_1) $                    & Násobení konstantou           & $\pm \,n\delta_1$ \\
      $\max(m\pm\delta_1,n\pm\delta_2) $    & Maximum                       & $\pm \max(\delta_1,\delta_2)$ \\
      $\min(m\pm\delta_1,n\pm\delta_2) $    & Minimum                       & $\pm \max(\delta_1,\delta_2)$ \\
      \bottomrule
    \end{tabular}
    \caption{Chyba celočíselných aritmetických operací, $m,n \in \Nn_0, \,\delta_1,\delta_2 \in \RR^+$}
    \end{center}
        \end{table}

        Jako příklad uveďme chybu WBES: na vstupu je použit Walshův list (dělení dvěmi, chyba $0.5$), poté sčítání a dělení čtyřmi. Nepoužíváme rozdíl, takže celočíselný výsledek bude menší nebo rovnen skutečnému:
        \beq
        \delta = +\Big( \frac{0.5+0.5+0.5+0.5}{4} + \frac{4-1}{4} \Big) = +1.25
        \eeq
        Pokud Walshův list uložíme do většího datového typu a průměrování provedeme až na konci (jedinné dělení osmi), můžeme chybu stlačit až na $+0.875$. Dělení (pouze to vnáší chybu) se pomocí rozšíření datového typu obecně snažíme přesouvat až nakonec výpočtu, abychom počítali co nejdéle přesně a minimalizovali tak chybu. Závěrem dodejme, že chyby v příkladu jsou absolutní -- při použití {\tt unsigned char} bude relativní chyba $\frac{+1.25}{256}$, při použití {\tt unsigned short} bude ještě 256krát menší.

    \section{Práce s 3D obrazovými daty}

    O uchovávání, načítání a ukládání 3D dat se v kódu stará šablonová třída \Imageman, geometrii obrazu má na starost abstaktní třída \Imageinfo. Celkový přehled struktury kódu s komentářem lze najít v příloze \ref{struktura kódu}.

        \subsection{Uspořádání v operační paměti}

        Kvůli rychlejší alokaci, kopírování a přesunu na (z) GPU jsou 3D data v paměti serializována do jednorozměrného pole podobně jako 3D maska do vektoru vah. Rozsah (0-255) je v paměti reprezentován klasicky jako {\tt unsigned char}, rozsah (0-65535) je však reprezentován 32-bitovým typem {\tt unsigned int}, jako pokusná optimalizace na rychlost\note{ nedat to opravdu jako 16-bit?}. Okraje obrazu (viz sekce~\ref{lokální zprac}) jsou dodefinovány nulou, šířka okrajů je neměnná a musí být známa v době alokace. Vzorová data obsahují scan mozku, který má tmavé okraje, takže nulové okraje jsou přirozené, navíc při filtraci nedochází k jejich zneplatnění a nemusí být obnovovány.
        
        \subsection{Formát souborů}
        
        3D data jsou načítána ze souboru ve formátu \Analyze, jehož specifikaci lze nalézt např. na webu \cite{Analyze 7.5}. Jedná se o dnes už zastaralý dvousouborový formát, vhodný pouze pro demonstrační účely\notea{ok?}. Soubor fname.hdr obsahuje hlavičku (rozměry, použitý datový typ, orientace...) a soubor fname.img obsahuje samotná obrazová data uspořádaná podle pokynů v hlavičce. Výstupním formátem klasické nekomprimované bmp v odstínech šedi, kde jsou 3D data uložena po řezech v předem definovaném směru, aby byla možná jednoduchá vizuální kontrola výsledků.

        \subsection{Životní cyklus dat}

        \paragraph{Načtení} dat ze souboru má na starosti metoda {\tt Load3D(fname,frameSize=-1)}, která nejprve přečte hlavičku a podle ní inicializuje (statické) členy \Imageinfo. Poté připraví příslušně velké pole datového typu \imDataType  včetně okrajů širokých {\tt frameSize} a do něj (s ohledem na okraje) uloží obrazová data přepočtená na žádaný datový typ. Je možné načíst libovolné množství vstupních souborů, inicializace geometrie však proběhne pouze podle prvního z nich, pro ostatní už se jen ověří, zda jsou rozměrově stejné a pokud ne, načítání selže. Jelikož velikost okrajů je neměnná, je nutné při načtení prvního 3D obrázku zadat {\tt frameSize} podle poleměru největší používané masky. Tato hodnota se také uloží do \Imageinfo  a není ji třeba pro další načítání zadávat. Pole s jednotlivými obrázky jsou postupně ukládána do vektoru \image  a pokud je nastavena proměnná {\tt CudaInfo::useCuda}, jsou taktéž odeslána na GPU pod příslušné složky vektoru \imageGpu.
        
        \paragraph{Filtrace}Pokud při ní chceme data uložit do nového obrázku, musíme použít funkci {\tt PrepareBlankImage(where,idx=-1)}, která podle parametru {\tt where} alokuje na konci příslušného vektoru (\image, nebo \imageGpu) pole příslušné velikosti a do druhého vektoru uloží pouze {\tt NULL} -- kvůli šetření pamětí (hlavně na GPU), a aby měly oba vektory stejně složek, jinak by se obrázky na CPU a GPU mohly zkřížit. Pokud chceme pouze přesunout obrázek z (na) GPU a na druhém zařízení ještě není alokované místo např. v důsledku dříve popsané oprerace, zavoláme tutéž funkci s požadovaným {\tt where} a {\tt idx} podle toho, pro jaký obrázek chceme paměť doalokovat.
        
        \paragraph{Ukládání} do bmp obstarává metoda {\tt SaveBmp(idx,fname,slicingDir,slicesPerLine)}. Ta udělá z 3D dat uložených v {\tt image[idx]} kolmé řezy podle hodnoty {\tt slicingDir} (0,1,2), které posléze uspořádá vedle sebe a pod sebe do 2D obrázku tak, že na řádku je právě {\tt slicesPerLine} řezů. Natočení řezů bylo nastaveno tak, aby řezy mozku (vzorová data) vypadaly rozumně. Data jsou poté přepočtena (nikoliv normalizována) do rozsahu 0-255 a uložena jako jednokanálové bmp s paletou v odstínech šedi. Pokud jsou data k uložení na GPU, je třeba je napřed zkopírovat do RAM.

    \section{Maska, strukturní element}
    
    Správu strukturních elementů má na starosti \notea{šablonová? }třída {\tt SEManager}, samotné strukturní elementy jsou uloženy ve struktuře {\tt structEl}, kterou pro přehlednost uvádíme zde:
    
    \begin{Verbatim}[commandchars = \\\{\}]
\bl{typedef struct} _structEl \{
    \bl{string} name;       // název pro pozdější vyhledání
    \bl{unsigned} nSize;    // počet nenulových prvků v masce
    \bl{unsigned} *nb;      // viz dále
    \bl{float} *weight;     // váhy okolních voxelů
    \bl{float} *origInput;  // původní neparsovaný vstup
\} structEl;
    \end{Verbatim}
    
    

    \section{Implementace filtrů} 